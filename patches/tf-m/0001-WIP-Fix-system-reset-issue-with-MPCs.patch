From ba3ae6c726e6e89c4723e49435ce4ac5ae8be246 Mon Sep 17 00:00:00 2001
From: Mark Horvath <mark.horvath@arm.com>
Date: Fri, 25 Jun 2021 16:38:23 +0200
Subject: [PATCH 1/5] [WIP] Fix system reset issue with MPCs

Signed-off-by: Mark Horvath <mark.horvath@arm.com>
Change-Id: I0a9545a71507a67980d7c7647953b8fd59d85c8f
---
 .../an547/services/src/tfm_platform_system.c  |  4 +++
 platform/ext/target/arm/mps3/an547/spm_hal.c  |  8 +++++
 .../ext/target/arm/mps3/an547/target_cfg.c    | 33 ++++++++++++-------
 .../ext/target/arm/mps3/an547/target_cfg.h    |  6 ++++
 4 files changed, 39 insertions(+), 12 deletions(-)

diff --git a/lib/tf-m/platform/ext/target/arm/mps3/an547/services/src/tfm_platform_system.c b/lib/tf-m/platform/ext/target/arm/mps3/an547/services/src/tfm_platform_system.c
index 44fafbcc..b9031a8b 100644
--- a/lib/tf-m/platform/ext/target/arm/mps3/an547/services/src/tfm_platform_system.c
+++ b/lib/tf-m/platform/ext/target/arm/mps3/an547/services/src/tfm_platform_system.c
@@ -6,10 +6,14 @@
  */
 
 #include "tfm_platform_system.h"
+#include "target_cfg.h"
 #include "cmsis.h"
 
 void tfm_platform_hal_system_reset(void)
 {
+    __disable_irq();
+    mpc_revert_non_secure_to_secure_cfg();
+
     /* Reset the system */
     NVIC_SystemReset();
 }
diff --git a/lib/tf-m/platform/ext/target/arm/mps3/an547/spm_hal.c b/lib/tf-m/platform/ext/target/arm/mps3/an547/spm_hal.c
index e8c8c8d6..f9ecd8c7 100644
--- a/lib/tf-m/platform/ext/target/arm/mps3/an547/spm_hal.c
+++ b/lib/tf-m/platform/ext/target/arm/mps3/an547/spm_hal.c
@@ -179,3 +179,11 @@ enum tfm_plat_err_t tfm_spm_hal_nvic_interrupt_enable(void)
 {
     return nvic_interrupt_enable();
 }
+
+void tfm_hal_system_reset(void)
+{
+    __disable_irq();
+    mpc_revert_non_secure_to_secure_cfg();
+
+    NVIC_SystemReset();
+}
diff --git a/lib/tf-m/platform/ext/target/arm/mps3/an547/target_cfg.c b/lib/tf-m/platform/ext/target/arm/mps3/an547/target_cfg.c
index ef9c023b..ece62768 100644
--- a/lib/tf-m/platform/ext/target/arm/mps3/an547/target_cfg.c
+++ b/lib/tf-m/platform/ext/target/arm/mps3/an547/target_cfg.c
@@ -373,23 +373,15 @@ enum tfm_plat_err_t mpc_init_cfg(void)
         return TFM_PLAT_ERR_SYSTEM_ERR;
     }
 
-    /* Lock down the MPC configuration */
-    ret = Driver_ISRAM0_MPC.LockDown();
-    if (ret != ARM_DRIVER_OK) {
-        ERROR_MSG("Failed to Lock down MPC for ISRAM0!");
-        return TFM_PLAT_ERR_SYSTEM_ERR;
-    }
-
-    ret = Driver_SRAM_MPC.LockDown();
-    if (ret != ARM_DRIVER_OK) {
-        ERROR_MSG("Failed to Lock down MPC for SRAM!");
-        return TFM_PLAT_ERR_SYSTEM_ERR;
-    }
 
     /* Lock down not used MPC's */
     Driver_QSPI_MPC.LockDown();
     Driver_ISRAM1_MPC.LockDown();
 
+    /* SRAM and ISRAM0 MPCs left unlocked as they are not reset if NVIC system
+     * reset asserted.
+     */
+
     /* Add barriers to assure the MPC configuration is done before continue
      * the execution.
      */
@@ -399,6 +391,23 @@ enum tfm_plat_err_t mpc_init_cfg(void)
     return TFM_PLAT_ERR_SUCCESS;
 }
 
+void mpc_revert_non_secure_to_secure_cfg(void)
+{
+    Driver_ISRAM0_MPC.ConfigRegion(MPC_ISRAM0_RANGE_BASE_S,
+                                   MPC_ISRAM0_RANGE_LIMIT_S,
+                                   ARM_MPC_ATTR_SECURE);
+
+    Driver_SRAM_MPC.ConfigRegion(MPC_SRAM_RANGE_BASE_S,
+                                 MPC_SRAM_RANGE_LIMIT_S,
+                                 ARM_MPC_ATTR_SECURE);
+
+    /* Add barriers to assure the MPC configuration is done before continue
+     * the execution.
+     */
+    __DSB();
+    __ISB();
+}
+
 void mpc_clear_irq(void)
 {
     Driver_ISRAM0_MPC.ClearInterrupt();
diff --git a/lib/tf-m/platform/ext/target/arm/mps3/an547/target_cfg.h b/lib/tf-m/platform/ext/target/arm/mps3/an547/target_cfg.h
index 6f0e4f83..8e0f0af4 100644
--- a/lib/tf-m/platform/ext/target/arm/mps3/an547/target_cfg.h
+++ b/lib/tf-m/platform/ext/target/arm/mps3/an547/target_cfg.h
@@ -157,4 +157,10 @@ void ppc_clear_irq(void);
  */
 void sau_and_idau_cfg(void);
 
+/**
+ * \brief Sets to secure the initialized non-secure regions of
+ *        the Memory Protection Controller.
+ */
+void mpc_revert_non_secure_to_secure_cfg(void);
+
 #endif /* __TARGET_CFG_H__ */
-- 
2.25.1

